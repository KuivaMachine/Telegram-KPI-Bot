package org.example.kpitelegrambot.bot.handlers;

import lombok.RequiredArgsConstructor;
import org.example.kpitelegrambot.bot.TelegramBot;
import org.example.kpitelegrambot.bot.keyboards.InlineKeyboardFactory;
import org.example.kpitelegrambot.data.EmployeeStatus;
import org.example.kpitelegrambot.entity.Employee;
import org.example.kpitelegrambot.service.DeleteService;
import org.example.kpitelegrambot.service.EmployeeService;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;

import java.util.List;


@Component
@RequiredArgsConstructor
public class UpdateHandler implements Handler {

    private final DeleteService deleteService;
    private final EmployeeService employeeService;
    Employee employee;
    TelegramBot telegramBot;
    private final PrinterHandler printerHandler;
    private final PackerHandler packerHandler;

    public void register(TelegramBot telegramBot) {
        this.telegramBot = telegramBot;
    }

    @Override
    public SendMessage process(Update update) {
        Long chatId = update.getMessage().getChatId();
        String text = update.getMessage().getText();

        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText("–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã \uD83E\uDD37");
        employee = employeeService.getEmployeeByChatId(chatId);

        if (text.equals("/kuiva")) {
            employeeService.deleteEmployeeByChatId(chatId);
        }
        return (switch (employee.getJob()) {
            case PACKER -> packerHandler.process(telegramBot, update, employee, sendMessage);
            case PRINTER -> printerHandler.process(telegramBot,update, employee, sendMessage);
            case UNKNOWN -> registrationProcess(sendMessage, employee, update);
        });

    }


    private SendMessage registrationProcess(SendMessage sendMessage, Employee employee, Update update) {
        Long chatId = update.getMessage().getChatId();
        String text = update.getMessage().getText();
        if (employee.getStatus().equals(EmployeeStatus.UNKNOWN_USER)) {
            return newUserProcessing(sendMessage, employee, update);
        }
        if (employee.getStatus().equals(EmployeeStatus.WAITING_FIO)) {
            return fillFioProcessing(sendMessage, employee, text);
        }
        if (employee.getStatus().equals(EmployeeStatus.WAITING_JOB)||employee.getStatus().equals(EmployeeStatus.WAITING_WORKTIME)) {
            telegramBot.deleteLastMessage(chatId, update.getMessage().getMessageId());
        }

        return sendMessage;
    }


    private SendMessage fillFioProcessing(SendMessage sendMessage, Employee employee, String text) {
        if (matchesFio(text)) {
            employee.setFio(text);
            employee.setStatus(EmployeeStatus.WAITING_JOB);
            employeeService.save(employee);
            sendMessage.setText("""
                    –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è ‚ò∫
                    –ê –∫–µ–º –í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?)
                    """);
            sendMessage.setReplyMarkup(InlineKeyboardFactory.getJobChoiceKeyboard());
        } else {
            sendMessage.setText(String.format("–ù–µ —Å–æ–≤—Å–µ–º –≤–µ—Ä–Ω–æ \uD83D\uDE42\n–í–∞—à–µ –§–ò–û, –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª ‚òù\n–§–æ—Ä–º–∞—Ç: ¬´–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ¬ª\n\n–í—ã –≤–≤–µ–ª–∏: \"%s\"", text));
        }
        return sendMessage;
    }

    private boolean matchesFio(String text) {
        String regex = ".*\\d.*";
        String[] words = text.split(" ");
        int n = 0;
        for (String word : words) {
            if (Character.isUpperCase(word.charAt(0))) {
                if (!word.matches(regex)) {
                    n++;
                }
            }
        }
        return n == 3;
    }


    private SendMessage newUserProcessing(SendMessage sendMessage, Employee employee, Update update) {
        employee.setChatId(update.getMessage().getChatId());
        employee.setUsername(update.getMessage().getFrom().getUserName());
        employee.setStatus(EmployeeStatus.WAITING_FIO);
        employeeService.save(employee);
        sendMessage.setText("""
                –ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç KPI, —è –±—É–¥—É –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –í–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!  \uD83D\uDE0E
                –í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –§–ò–û, —è –µ–≥–æ –∑–∞–ø–æ–º–Ω—é.\s
                –ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–ù–∏–∫–∏—Ñ–æ—Ä–æ–≤–∞ –ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –õ–µ–º–∞—Ä–æ–≤–Ω–∞¬ª \uD83D\uDE42""");
        return sendMessage;
    }


    public void saveLastMessageId(String chat_id, int messageId) {
        int chatId = Integer.parseInt(chat_id);
        deleteService.saveMessageId(chatId, messageId);
    }

    public int getLastMessageId(Long chatId) {
        return deleteService.getLastMessageId(Math.toIntExact(chatId));
    }
}
