package org.example.kpitelegrambot.bot.handlers;

import lombok.RequiredArgsConstructor;
import org.example.kpitelegrambot.bot.TelegramBot;
import org.example.kpitelegrambot.bot.keyboards.InlineKeyboardFactory;
import org.example.kpitelegrambot.bot.keyboards.ReplyKeyboardFactory;
import org.example.kpitelegrambot.data.ButtonLabels;
import org.example.postgresql.data.EmployeeStatus;
import org.example.postgresql.entity.Employee;
import org.example.postgresql.service.EmployeeService;
import org.example.postgresql.DAO.PostgreSQLController;
import org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;

import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.TimeUnit;

import static org.apache.kafka.common.requests.DeleteAclsResponse.log;

@Component
@RequiredArgsConstructor
public class PrinterHandler implements JobHandler {

    private final EmployeeService employeeService;
    private final PostgreSQLController postgres;
    private Timer timer;
    private TelegramBot tgbot;

    @Override
    public SendMessage process(TelegramBot telegramBot, Update update, Employee currentEmployee, SendMessage sendMessage) {
        sendMessage.setText("–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã A \uD83E\uDD37");
        String receivedMessage = update.getMessage().getText();
this.tgbot = telegramBot;
        if (receivedMessage.equals("/start")) {
            return sayHelloProcess(sendMessage, currentEmployee);
        }
        if (receivedMessage.equals(ButtonLabels.CANCEL_ADDING.getLabel())) {
            return cancelAddingStatistic(sendMessage, currentEmployee);
        }
        if (currentEmployee.getStatus().equals(EmployeeStatus.SAVED)) {
            if (receivedMessage.equals(ButtonLabels.ADD_NEW_STATISTICS.getLabel())) {
                return createNewStatisticPost(currentEmployee, sendMessage);
            }
            if (receivedMessage.equals(ButtonLabels.SHOW_STATISTIC.getLabel())) {
                return showLastRecord(currentEmployee, sendMessage);
            }
        }
        if (currentEmployee.getStatus().equals(EmployeeStatus.WAITING_DATE)) {
            return invalidDateProcess(sendMessage);
        }
        if (currentEmployee.getStatus().equals(EmployeeStatus.WAITING_PRINTS_NUM)) {
            if (receivedMessage.matches("\\d{1,3}")) {
                return fillPrintsNumProcess(sendMessage, currentEmployee, receivedMessage);
            } else {
                return invalidNumberProcess(sendMessage, receivedMessage);
            }
        }
        if (currentEmployee.getStatus().equals(EmployeeStatus.WAITING_DEFECTS_NUM)) {
            if (receivedMessage.matches("\\d{1,3}")) {
                return fillDefectsNumProcess(sendMessage, currentEmployee, receivedMessage);
            } else {
                return invalidNumberProcess(sendMessage, receivedMessage);
            }
        }

        return sendMessage;
    }

    public SendMessage sayHelloProcess(SendMessage sendMessage, Employee currentEmployee) {
        postgres.deletePrinterBuffer(currentEmployee);
        currentEmployee.setStatus(EmployeeStatus.SAVED);
        employeeService.save(currentEmployee);
        String[] fio = currentEmployee.getFio().split(" ");
        sendMessage.setText(String.format("–ü—Ä–∏–≤–µ—Ç, %s! \n–î–æ–±–∞–≤–∏–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?)", fio[1]));
        sendMessage.setReplyMarkup(ReplyKeyboardFactory.getAddStatKeyboard());
        return sendMessage;
    }

    private SendMessage invalidDateProcess(SendMessage sendMessage) {
        sendMessage.setText("–ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –í–∞—à–µ–π —Å–º–µ–Ω—ã)");
        return sendMessage;
    }

    public SendMessage cancelAddingStatistic(SendMessage sendMessage, Employee currentEmployee) {
        postgres.deletePrinterBuffer(currentEmployee);
        currentEmployee.setStatus(EmployeeStatus.SAVED);
        employeeService.save(currentEmployee);
        sendMessage.setText("""
                –Ø –≤—Å–µ –æ—Ç–º–µ–Ω–∏–ª üëç –ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É,\s
                –Ω–∞–∂–º–∏—Ç–µ ¬´–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É¬ª
                """);
        sendMessage.setReplyMarkup(ReplyKeyboardFactory.getAddStatKeyboard());
        return sendMessage;
    }

    public SendMessage invalidNumberProcess(SendMessage sendMessage, String text) {
        sendMessage.setText(String.format("–í—ã –≤–≤–µ–ª–∏ %s \n–ö–∞–∫–æ–µ-—Ç–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ \uD83D\uDE11 \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑–æ–∫?", text));
        return sendMessage;
    }

    public SendMessage showLastRecord(Employee currentEmployee, SendMessage sendMessage) {
        sendMessage.setText(postgres.getLastAddedPrinterRecordToString(currentEmployee));
        return sendMessage;
    }

    private SendMessage fillDefectsNumProcess(SendMessage sendMessage, Employee currentEmployee, String numberOfDefects) {
        postgres.addValueInBufferFromPrinter(currentEmployee, Integer.parseInt(numberOfDefects), "defects_num");
        sendMessage.setText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –í–∞—à–µ–π —Å–º–µ–Ω—ã \uD83D\uDCC5");
        sendMessage.setReplyMarkup(InlineKeyboardFactory.getDateChoiceKeyboard());
        currentEmployee.setStatus(EmployeeStatus.WAITING_DATE);
        employeeService.save(currentEmployee);
        return sendMessage;
    }

    private SendMessage fillPrintsNumProcess(SendMessage sendMessage, Employee currentEmployee, String numberOfPrints) {
        postgres.addValueInBufferFromPrinter(currentEmployee, Integer.parseInt(numberOfPrints), "prints_num");
        currentEmployee.setStatus(EmployeeStatus.WAITING_DEFECTS_NUM);
        employeeService.save(currentEmployee);
        sendMessage.setText("–ê —Å–∫–æ–ª—å–∫–æ —É –í–∞—Å –±—ã–ª–æ –±—Ä–∞–∫–∞?");
        return sendMessage;
    }

    //–î–û–ë–ê–í–ò–¢–¨ –ù–û–í–£–Æ –°–¢–ê–¢–ò–°–¢–ò–ö–£
    public SendMessage createNewStatisticPost(Employee currentEmployee, SendMessage sendMessage) {
        //–°–û–ó–î–ê–¢–¨ –ù–û–í–£–Æ –¢–ê–ë–õ–ò–¶–£(–ï–°–õ–ò –ù–ï –°–û–ó–î–ê–ù–ê) –ò –°–û–ó–î–ê–¢–¨ –ë–£–§–ï–†
        postgres.createNewStatisticTableIfNotExists(currentEmployee);
        postgres.createNewStatisticBuffer(currentEmployee);
        //–°–û–•–†–ê–ù–ò–¢–¨ –°–¢–ê–¢–£–° –û–ñ–ò–î–ê–ù–ò–Ø –ß–ò–°–õ–ê –ù–ê–ü–ï–ß–ê–¢–ê–ù–ù–û–ì–û
        currentEmployee.setStatus(EmployeeStatus.WAITING_PRINTS_NUM);
        employeeService.save(currentEmployee);
        //–û–¢–ü–†–ê–í–ò–¢–¨ –°–õ–ï–î–£–Æ–©–ï–ï –°–û–û–ë–©–ï–ù–ò–ï –ò –ö–õ–ê–í–ò–ê–¢–£–†–£ –° –û–¢–ú–ï–ù–û–ô
        sendMessage.setText("–°–∫–æ–ª—å–∫–æ –≤—Å–µ–≥–æ –í—ã –Ω–∞–ø–µ—á–∞—Ç–∞–ª–∏?)");
        sendMessage.setReplyMarkup(ReplyKeyboardFactory.getCancelKeyboard());
      /*  //–£–°–¢–ê–ù–û–í–ò–¢–¨ –¢–ê–ô–ú–ï–† –ù–ê 1 –ß–ê–°, –ß–¢–û–ë–´ –û–¢–ú–ï–ù–ò–¢–¨ –î–û–ë–ê–í–õ–ï–ù–ò–ï, –ï–°–õ–ò –í –¢–ï–ß–ï–ù–ò–ò –ß–ê–°–ê –ù–ò–ß–ï–ì–û –ù–ï –ü–†–û–ò–°–•–û–î–ò–¢
        if (timer != null && timer.purge() > 0) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ —Å–æ–∑–¥–∞–Ω —Ç–∞–π–º–µ—Ä
            stopTimer(); // –ï—Å–ª–∏ –¥–∞, —Ç–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ–≥–æ
        }
        timer = new Timer();
        TimerTask task = new TimerTask() {
            @Override
            public void run() {
                tgbot.sendAnswer(cancelAddingStatistic(sendMessage, currentEmployee)); // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
                timer.cancel(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
            }
        };
        timer.schedule(task, 60000); // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É —á–µ—Ä–µ–∑ 1 —á–∞—Å (3600000 –º—Å)
        log.info("–¢–ê–ô–ú–ï–† –ó–ê–ü–£–©–ï–ù –ù–ê 1 –ú–ò–ù");*/
        return sendMessage;
    }

   /* private void stopTimer() {
        if (timer != null) {
            timer.cancel(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
            timer.purge(); // –û—á–∏—â–∞–µ–º –≤—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
            timer = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–π–º–µ—Ä
        }
    }*/

}
